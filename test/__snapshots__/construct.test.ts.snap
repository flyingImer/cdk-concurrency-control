// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`snapshot test 1`] = `
Object {
  "Mappings": Object {
    "ServiceprincipalMap": Object {
      "af-south-1": Object {
        "states": "states.af-south-1.amazonaws.com",
      },
      "ap-east-1": Object {
        "states": "states.ap-east-1.amazonaws.com",
      },
      "ap-northeast-1": Object {
        "states": "states.ap-northeast-1.amazonaws.com",
      },
      "ap-northeast-2": Object {
        "states": "states.ap-northeast-2.amazonaws.com",
      },
      "ap-northeast-3": Object {
        "states": "states.ap-northeast-3.amazonaws.com",
      },
      "ap-south-1": Object {
        "states": "states.ap-south-1.amazonaws.com",
      },
      "ap-southeast-1": Object {
        "states": "states.ap-southeast-1.amazonaws.com",
      },
      "ap-southeast-2": Object {
        "states": "states.ap-southeast-2.amazonaws.com",
      },
      "ap-southeast-3": Object {
        "states": "states.ap-southeast-3.amazonaws.com",
      },
      "ca-central-1": Object {
        "states": "states.ca-central-1.amazonaws.com",
      },
      "cn-north-1": Object {
        "states": "states.cn-north-1.amazonaws.com",
      },
      "cn-northwest-1": Object {
        "states": "states.cn-northwest-1.amazonaws.com",
      },
      "eu-central-1": Object {
        "states": "states.eu-central-1.amazonaws.com",
      },
      "eu-north-1": Object {
        "states": "states.eu-north-1.amazonaws.com",
      },
      "eu-south-1": Object {
        "states": "states.eu-south-1.amazonaws.com",
      },
      "eu-south-2": Object {
        "states": "states.eu-south-2.amazonaws.com",
      },
      "eu-west-1": Object {
        "states": "states.eu-west-1.amazonaws.com",
      },
      "eu-west-2": Object {
        "states": "states.eu-west-2.amazonaws.com",
      },
      "eu-west-3": Object {
        "states": "states.eu-west-3.amazonaws.com",
      },
      "me-south-1": Object {
        "states": "states.me-south-1.amazonaws.com",
      },
      "sa-east-1": Object {
        "states": "states.sa-east-1.amazonaws.com",
      },
      "us-east-1": Object {
        "states": "states.us-east-1.amazonaws.com",
      },
      "us-east-2": Object {
        "states": "states.us-east-2.amazonaws.com",
      },
      "us-gov-east-1": Object {
        "states": "states.us-gov-east-1.amazonaws.com",
      },
      "us-gov-west-1": Object {
        "states": "states.us-gov-west-1.amazonaws.com",
      },
      "us-iso-east-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-iso-west-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-isob-east-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-west-1": Object {
        "states": "states.us-west-1.amazonaws.com",
      },
      "us-west-2": Object {
        "states": "states.us-west-2.amazonaws.com",
      },
    },
  },
  "Resources": Object {
    "DistributedSemaphore7248237C": Object {
      "DependsOn": Array [
        "DistributedSemaphoreRoleDefaultPolicyAABB7C91",
        "DistributedSemaphoreRoleDB487D50",
      ],
      "Properties": Object {
        "DefinitionString": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"StartAt\\":\\"AcquireMyLock\\",\\"States\\":{\\"AcquireMyLock\\":{\\"Type\\":\\"Parallel\\",\\"Next\\":\\"DoNothing\\",\\"Branches\\":[{\\"StartAt\\":\\"AcquireMyLock: AcquireLock\\",\\"States\\":{\\"AcquireMyLock: AcquireLock\\":{\\"Next\\":\\"AcquireMyLock: LockAcquired\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"DynamoDB.AmazonDynamoDBException\\"],\\"MaxAttempts\\":0},{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"DynamoDB.AmazonDynamoDBException\\"],\\"ResultPath\\":\\"$.lockinfo.acquisitionerror\\",\\"Next\\":\\"AcquireMyLock: InitializeLockItem\\"},{\\"ErrorEquals\\":[\\"DynamoDB.ConditionalCheckFailedException\\"],\\"ResultPath\\":\\"$.lockinfo.acquisitionerror\\",\\"Next\\":\\"AcquireMyLock: GetCurrentLockRecord\\"}],\\"Type\\":\\"Task\\",\\"Comment\\":\\"acquire a lock using a conditional update to DynamoDB. This update will do two things: 1) increment a counter for the number of held locks and 2) add an attribute to the DynamoDB Item with a unique key for this execution and with a value of the time when the lock was Acquired. The Update includes a conditional expression that will fail under two circumstances: 1) if the maximum number of locks have already been distributed or 2) if the current execution already owns a lock. The latter check is important to ensure the same execution doesn't increase the counter more than once. If either of these conditions are not met, then the task will fail with a DynamoDB.ConditionalCheckFailedException error, retry a few times, then if it is still not successful, it will move off to another branch of the workflow. If this is the first time that a given lockname has been used, there will not be a row in DynamoDB, so the update will fail with DynamoDB.AmazonDynamoDBException. In that case, this state sends the workflow to state that will create that row to initialize.\\",\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:updateItem\\",\\"Parameters\\":{\\"Key\\":{\\"LockName\\":{\\"S\\":\\"MySemaphore\\"}},\\"TableName\\":\\"",
              Object {
                "Ref": "DistributedSemaphoreLockTable45D69AC1",
              },
              "\\",\\"ConditionExpression\\":\\"currentlockcount <> :limit and attribute_not_exists(#lockownerid)\\",\\"ExpressionAttributeNames\\":{\\"#currentlockcount\\":\\"currentlockcount\\",\\"#lockownerid.$\\":\\"$$.Execution.Id\\"},\\"ExpressionAttributeValues\\":{\\":increase\\":{\\"N\\":\\"1\\"},\\":limit\\":{\\"N\\":\\"5\\"},\\":lockacquiredtime\\":{\\"S.$\\":\\"$$.State.EnteredTime\\"}},\\"ReturnValues\\":\\"UPDATED_NEW\\",\\"UpdateExpression\\":\\"SET #currentlockcount = #currentlockcount + :increase, #lockownerid = :lockacquiredtime\\"}},\\"AcquireMyLock: InitializeLockItem\\":{\\"Next\\":\\"AcquireMyLock: AcquireLock\\",\\"Catch\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"Next\\":\\"AcquireMyLock: AcquireLock\\"}],\\"Type\\":\\"Task\\",\\"Comment\\":\\"This state handles the case where an item hasn't been created for this lock yet. In that case, it will insert an initial item that includes the lock name as the key and currentlockcount of 0. The Put to DynamoDB includes a conditonal expression to fail if the an item with that key already exists, which avoids a race condition if multiple executions start at the same time. There are other reasons that the previous state could fail and end up here, so this is safe in those cases too.\\",\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:putItem\\",\\"Parameters\\":{\\"Item\\":{\\"LockName\\":{\\"S\\":\\"MySemaphore\\"},\\"currentlockcount\\":{\\"N\\":\\"0\\"}},\\"TableName\\":\\"",
              Object {
                "Ref": "DistributedSemaphoreLockTable45D69AC1",
              },
              "\\",\\"ConditionExpression\\":\\"LockName <> :lockname\\",\\"ExpressionAttributeValues\\":{\\":lockname\\":{\\"S\\":\\"MySemaphore\\"}}}},\\"AcquireMyLock: WaitToGetLock\\":{\\"Type\\":\\"Wait\\",\\"Comment\\":\\"If the lock indeed not been succesfully Acquired, then wait for a bit before trying again.\\",\\"Seconds\\":3,\\"Next\\":\\"AcquireMyLock: AcquireLock\\"},\\"AcquireMyLock: LockAcquired\\":{\\"Type\\":\\"Pass\\",\\"End\\":true},\\"AcquireMyLock: LockAcquisitionConfirmedContinue\\":{\\"Type\\":\\"Pass\\",\\"Comment\\":\\"In this state, we have confimed that lock is already held, so we pass the original execution input into the the function that does the work.\\",\\"Next\\":\\"AcquireMyLock: LockAcquired\\"},\\"AcquireMyLock: CheckIfLockAlreadyAcquired\\":{\\"Type\\":\\"Choice\\",\\"Comment\\":\\"This state checks to see if the current execution already holds a lock. It can tell that by looking for Z, which will be indicative of the timestamp value. That will only be there in the stringified version of the data returned from DDB if this execution holds a lock.\\",\\"Choices\\":[{\\"And\\":[{\\"Variable\\":\\"$.lockinfo.currentlockitem.ItemString\\",\\"IsPresent\\":true},{\\"Variable\\":\\"$.lockinfo.currentlockitem.ItemString\\",\\"StringMatches\\":\\"*Z*\\"}],\\"Next\\":\\"AcquireMyLock: LockAcquisitionConfirmedContinue\\"}],\\"Default\\":\\"AcquireMyLock: WaitToGetLock\\"},\\"AcquireMyLock: GetCurrentLockRecord\\":{\\"Next\\":\\"AcquireMyLock: CheckIfLockAlreadyAcquired\\",\\"Type\\":\\"Task\\",\\"Comment\\":\\"This state is called when the execution is unable to acquire a lock because there limit has either been exceeded or because this execution already holds a lock. I that case, this task loads info from DDB for the current lock item so that the right decision can be made in subsequent states.\\",\\"ResultPath\\":\\"$.lockinfo.currentlockitem\\",\\"ResultSelector\\":{\\"Item.$\\":\\"$.Item\\",\\"ItemString.$\\":\\"States.JsonToString($.Item)\\"},\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:getItem\\",\\"Parameters\\":{\\"Key\\":{\\"LockName\\":{\\"S\\":\\"MySemaphore\\"}},\\"TableName\\":\\"",
              Object {
                "Ref": "DistributedSemaphoreLockTable45D69AC1",
              },
              "\\",\\"ConsistentRead\\":true,\\"ExpressionAttributeNames\\":{\\"#lockownerid.$\\":\\"$$.Execution.Id\\"},\\"ProjectionExpression\\":\\"#lockownerid\\"}}}}]},\\"DoNothing\\":{\\"Type\\":\\"Pass\\",\\"Next\\":\\"ReleaseMyLock\\"},\\"ReleaseMyLock\\":{\\"Type\\":\\"Parallel\\",\\"End\\":true,\\"Branches\\":[{\\"StartAt\\":\\"ReleaseMyLock: ReleaseLock\\",\\"States\\":{\\"ReleaseMyLock: ReleaseLock\\":{\\"Next\\":\\"ReleaseMyLock: LockReleased\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"DynamoDB.ConditionalCheckFailedException\\"],\\"MaxAttempts\\":0},{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"MaxAttempts\\":5,\\"BackoffRate\\":1.5}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"DynamoDB.ConditionalCheckFailedException\\"],\\"Next\\":\\"ReleaseMyLock: LockNotFoundContinue\\"}],\\"Type\\":\\"Task\\",\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:updateItem\\",\\"Parameters\\":{\\"Key\\":{\\"LockName\\":{\\"S\\":\\"MySemaphore\\"}},\\"TableName\\":\\"",
              Object {
                "Ref": "DistributedSemaphoreLockTable45D69AC1",
              },
              "\\",\\"ConditionExpression\\":\\"attribute_exists(#lockownerid)\\",\\"ExpressionAttributeNames\\":{\\"#currentlockcount\\":\\"currentlockcount\\",\\"#lockownerid.$\\":\\"$$.Execution.Id\\"},\\"ExpressionAttributeValues\\":{\\":decrease\\":{\\"N\\":\\"1\\"}},\\"ReturnValues\\":\\"UPDATED_NEW\\",\\"UpdateExpression\\":\\"SET #currentlockcount = #currentlockcount - :decrease REMOVE #lockownerid\\"}},\\"ReleaseMyLock: LockReleased\\":{\\"Type\\":\\"Pass\\",\\"End\\":true},\\"ReleaseMyLock: LockNotFoundContinue\\":{\\"Type\\":\\"Pass\\",\\"Next\\":\\"ReleaseMyLock: LockReleased\\"}}}]}}}",
            ],
          ],
        },
        "LoggingConfiguration": Object {
          "Destinations": Array [
            Object {
              "CloudWatchLogsLogGroup": Object {
                "LogGroupArn": Object {
                  "Fn::GetAtt": Array [
                    "DistributedSemaphoreSemaphoreLogGroup5BA5E6E6",
                    "Arn",
                  ],
                },
              },
            },
          ],
          "IncludeExecutionData": true,
          "Level": "ALL",
        },
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "DistributedSemaphoreRoleDB487D50",
            "Arn",
          ],
        },
        "TracingConfiguration": Object {
          "Enabled": true,
        },
      },
      "Type": "AWS::StepFunctions::StateMachine",
    },
    "DistributedSemaphoreLockTable45D69AC1": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "LockName",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": Array [
          Object {
            "AttributeName": "LockName",
            "KeyType": "HASH",
          },
        ],
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "DistributedSemaphoreRoleDB487D50": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::FindInMap": Array [
                    "ServiceprincipalMap",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    "states",
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "DistributedSemaphoreRoleDefaultPolicyAABB7C91": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogDelivery",
                "logs:GetLogDelivery",
                "logs:UpdateLogDelivery",
                "logs:DeleteLogDelivery",
                "logs:ListLogDeliveries",
                "logs:PutResourcePolicy",
                "logs:DescribeResourcePolicies",
                "logs:DescribeLogGroups",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
                "xray:GetSamplingRules",
                "xray:GetSamplingTargets",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "dynamodb:UpdateItem",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":dynamodb:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":table/",
                    Object {
                      "Ref": "DistributedSemaphoreLockTable45D69AC1",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": "dynamodb:PutItem",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":dynamodb:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":table/",
                    Object {
                      "Ref": "DistributedSemaphoreLockTable45D69AC1",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": "dynamodb:GetItem",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":dynamodb:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":table/",
                    Object {
                      "Ref": "DistributedSemaphoreLockTable45D69AC1",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DistributedSemaphoreRoleDefaultPolicyAABB7C91",
        "Roles": Array [
          Object {
            "Ref": "DistributedSemaphoreRoleDB487D50",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DistributedSemaphoreRunForIncomplete46566F45": Object {
      "Properties": Object {
        "EventPattern": Object {
          "detail": Object {
            "stateMachineArn": Array [
              Object {
                "Ref": "DistributedSemaphore7248237C",
              },
            ],
            "status": Array [
              "FAILED",
              "TIMED_OUT",
              "ABORTED",
            ],
          },
          "source": Array [
            "aws.states",
          ],
        },
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Ref": "DistributedSemaphoreSemaphoreCleanup4070C6CC",
            },
            "Id": "Target0",
            "RoleArn": Object {
              "Fn::GetAtt": Array [
                "DistributedSemaphoreSemaphoreCleanupEventsRole88C26C12",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "DistributedSemaphoreSemaphoreCleanup4070C6CC": Object {
      "DependsOn": Array [
        "DistributedSemaphoreSemaphoreCleanupRoleDefaultPolicy0ADCE922",
        "DistributedSemaphoreSemaphoreCleanupRoleCA3B1346",
      ],
      "Properties": Object {
        "DefinitionString": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"StartAt\\":\\"GetCurrentLockItem\\",\\"States\\":{\\"GetCurrentLockItem\\":{\\"Next\\":\\"CheckIfLockIsHeld\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"IntervalSeconds\\":5,\\"MaxAttempts\\":20,\\"BackoffRate\\":1.4}],\\"Type\\":\\"Task\\",\\"Comment\\":\\"Get info from DDB for the lock item to look and see if this specific owner is still holding a lock\\",\\"ResultPath\\":\\"$.lockinfo.currentlockitem\\",\\"ResultSelector\\":{\\"Item.$\\":\\"$.Item\\",\\"ItemString.$\\":\\"States.JsonToString($.Item)\\"},\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:getItem\\",\\"Parameters\\":{\\"Key\\":{\\"LockName\\":{\\"S\\":\\"MySemaphore\\"}},\\"TableName\\":\\"",
              Object {
                "Ref": "DistributedSemaphoreLockTable45D69AC1",
              },
              "\\",\\"ConsistentRead\\":true,\\"ExpressionAttributeNames\\":{\\"#lockownerid.$\\":\\"$.detail.executionArn\\"},\\"ProjectionExpression\\":\\"#lockownerid\\"}},\\"CheckIfLockIsHeld\\":{\\"Type\\":\\"Choice\\",\\"Comment\\":\\"This state checks to see if the execution in question holds a lock. It can tell that by looking for Z, which will be indicative of the timestamp value. That will only be there in the stringified version of the data returned from DDB if this execution holds a lock\\",\\"Choices\\":[{\\"And\\":[{\\"Variable\\":\\"$.lockinfo.currentlockitem.ItemString\\",\\"IsPresent\\":true},{\\"Variable\\":\\"$.lockinfo.currentlockitem.ItemString\\",\\"StringMatches\\":\\"*Z*\\"}],\\"Next\\":\\"CleanUpLock\\"}],\\"Default\\":\\"SuccessStateCleanup\\"},\\"SuccessStateCleanup\\":{\\"Type\\":\\"Succeed\\"},\\"CleanUpLock\\":{\\"Next\\":\\"SuccessStateCleanup\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"DynamoDB.ConditionalCheckFailedException\\"],\\"MaxAttempts\\":0},{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"IntervalSeconds\\":5,\\"MaxAttempts\\":20,\\"BackoffRate\\":1.4}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"DynamoDB.ConditionalCheckFailedException\\"],\\"Next\\":\\"SuccessStateCleanup\\"}],\\"Type\\":\\"Task\\",\\"Comment\\":\\"If this lockowerid is still there, then clean it up and release the lock\\",\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:updateItem\\",\\"Parameters\\":{\\"Key\\":{\\"LockName\\":{\\"S\\":\\"MySemaphore\\"}},\\"TableName\\":\\"",
              Object {
                "Ref": "DistributedSemaphoreLockTable45D69AC1",
              },
              "\\",\\"ConditionExpression\\":\\"attribute_exists(#lockownerid)\\",\\"ExpressionAttributeNames\\":{\\"#currentlockcount\\":\\"currentlockcount\\",\\"#lockownerid.$\\":\\"$.detail.executionArn\\"},\\"ExpressionAttributeValues\\":{\\":decrease\\":{\\"N\\":\\"1\\"}},\\"ReturnValues\\":\\"UPDATED_NEW\\",\\"UpdateExpression\\":\\"SET #currentlockcount = #currentlockcount - :decrease REMOVE #lockownerid\\"}}}}",
            ],
          ],
        },
        "LoggingConfiguration": Object {
          "Destinations": Array [
            Object {
              "CloudWatchLogsLogGroup": Object {
                "LogGroupArn": Object {
                  "Fn::GetAtt": Array [
                    "DistributedSemaphoreSemaphoreCleanupLogGroup568B996B",
                    "Arn",
                  ],
                },
              },
            },
          ],
          "IncludeExecutionData": true,
          "Level": "ALL",
        },
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "DistributedSemaphoreSemaphoreCleanupRoleCA3B1346",
            "Arn",
          ],
        },
        "TracingConfiguration": Object {
          "Enabled": true,
        },
      },
      "Type": "AWS::StepFunctions::StateMachine",
    },
    "DistributedSemaphoreSemaphoreCleanupEventsRole88C26C12": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "DistributedSemaphoreSemaphoreCleanupEventsRoleDefaultPolicyE7FC8AA3": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DistributedSemaphoreSemaphoreCleanup4070C6CC",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DistributedSemaphoreSemaphoreCleanupEventsRoleDefaultPolicyE7FC8AA3",
        "Roles": Array [
          Object {
            "Ref": "DistributedSemaphoreSemaphoreCleanupEventsRole88C26C12",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DistributedSemaphoreSemaphoreCleanupLogGroup568B996B": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 60,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "DistributedSemaphoreSemaphoreCleanupRoleCA3B1346": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::FindInMap": Array [
                    "ServiceprincipalMap",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    "states",
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "DistributedSemaphoreSemaphoreCleanupRoleDefaultPolicy0ADCE922": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogDelivery",
                "logs:GetLogDelivery",
                "logs:UpdateLogDelivery",
                "logs:DeleteLogDelivery",
                "logs:ListLogDeliveries",
                "logs:PutResourcePolicy",
                "logs:DescribeResourcePolicies",
                "logs:DescribeLogGroups",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
                "xray:GetSamplingRules",
                "xray:GetSamplingTargets",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "dynamodb:GetItem",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":dynamodb:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":table/",
                    Object {
                      "Ref": "DistributedSemaphoreLockTable45D69AC1",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": "dynamodb:UpdateItem",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":dynamodb:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":table/",
                    Object {
                      "Ref": "DistributedSemaphoreLockTable45D69AC1",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DistributedSemaphoreSemaphoreCleanupRoleDefaultPolicy0ADCE922",
        "Roles": Array [
          Object {
            "Ref": "DistributedSemaphoreSemaphoreCleanupRoleCA3B1346",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DistributedSemaphoreSemaphoreLogGroup5BA5E6E6": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 60,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "DistributedSemaphoreSemaphoreTestingE007A549": Object {
      "DependsOn": Array [
        "DistributedSemaphoreSemaphoreTestingRoleDefaultPolicy02A59DA7",
        "DistributedSemaphoreSemaphoreTestingRole18C930B5",
      ],
      "Properties": Object {
        "DefinitionString": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"StartAt\\":\\"GenerateDefaultInput\\",\\"States\\":{\\"GenerateDefaultInput\\":{\\"Type\\":\\"Pass\\",\\"Parameters\\":{\\"iterations\\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]},\\"Next\\":\\"StartInParallel\\"},\\"StartInParallel\\":{\\"Type\\":\\"Map\\",\\"End\\":true,\\"Iterator\\":{\\"StartAt\\":\\"RunChildStateMachine\\",\\"States\\":{\\"RunChildStateMachine\\":{\\"Next\\":\\"ClearResults\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"StepFunctions.ExecutionAlreadyExistsException\\"],\\"IntervalSeconds\\":1,\\"MaxAttempts\\":1,\\"BackoffRate\\":5},{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"IntervalSeconds\\":1,\\"MaxAttempts\\":12,\\"BackoffRate\\":2}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"States.TaskFailed\\"],\\"ResultPath\\":\\"$.stateoutput.RunChildStateMachine\\",\\"Next\\":\\"ClearResults\\"}],\\"Type\\":\\"Task\\",\\"ResultSelector\\":{\\"Nothing\\":\\"Nothing\\"},\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::states:startExecution.sync:2\\",\\"Parameters\\":{\\"Input\\":{\\"AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$\\":\\"$$.Execution.Id\\"},\\"StateMachineArn\\":\\"",
              Object {
                "Ref": "DistributedSemaphore7248237C",
              },
              "\\"}},\\"ClearResults\\":{\\"Type\\":\\"Pass\\",\\"Result\\":\\"Done\\",\\"End\\":true}}},\\"ItemsPath\\":\\"$.iterations\\",\\"MaxConcurrency\\":0}}}",
            ],
          ],
        },
        "LoggingConfiguration": Object {
          "Destinations": Array [
            Object {
              "CloudWatchLogsLogGroup": Object {
                "LogGroupArn": Object {
                  "Fn::GetAtt": Array [
                    "DistributedSemaphoreSemaphoreTestingLogGroup5B310090",
                    "Arn",
                  ],
                },
              },
            },
          ],
          "IncludeExecutionData": true,
          "Level": "ALL",
        },
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "DistributedSemaphoreSemaphoreTestingRole18C930B5",
            "Arn",
          ],
        },
        "TracingConfiguration": Object {
          "Enabled": true,
        },
      },
      "Type": "AWS::StepFunctions::StateMachine",
    },
    "DistributedSemaphoreSemaphoreTestingLogGroup5B310090": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 60,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "DistributedSemaphoreSemaphoreTestingRole18C930B5": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::FindInMap": Array [
                    "ServiceprincipalMap",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    "states",
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "DistributedSemaphoreSemaphoreTestingRoleDefaultPolicy02A59DA7": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogDelivery",
                "logs:GetLogDelivery",
                "logs:UpdateLogDelivery",
                "logs:DeleteLogDelivery",
                "logs:ListLogDeliveries",
                "logs:PutResourcePolicy",
                "logs:DescribeResourcePolicies",
                "logs:DescribeLogGroups",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
                "xray:GetSamplingRules",
                "xray:GetSamplingTargets",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DistributedSemaphore7248237C",
              },
            },
            Object {
              "Action": Array [
                "states:DescribeExecution",
                "states:StopExecution",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":states:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":execution:",
                    Object {
                      "Fn::Select": Array [
                        6,
                        Object {
                          "Fn::Split": Array [
                            ":",
                            Object {
                              "Ref": "DistributedSemaphore7248237C",
                            },
                          ],
                        },
                      ],
                    },
                    "*",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "events:PutTargets",
                "events:PutRule",
                "events:DescribeRule",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":events:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":rule/StepFunctionsGetEventsForStepFunctionsExecutionRule",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DistributedSemaphoreSemaphoreTestingRoleDefaultPolicy02A59DA7",
        "Roles": Array [
          Object {
            "Ref": "DistributedSemaphoreSemaphoreTestingRole18C930B5",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
}
`;
