// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`snapshot test 1`] = `
Object {
  "Mappings": Object {
    "ServiceprincipalMap": Object {
      "af-south-1": Object {
        "states": "states.af-south-1.amazonaws.com",
      },
      "ap-east-1": Object {
        "states": "states.ap-east-1.amazonaws.com",
      },
      "ap-northeast-1": Object {
        "states": "states.ap-northeast-1.amazonaws.com",
      },
      "ap-northeast-2": Object {
        "states": "states.ap-northeast-2.amazonaws.com",
      },
      "ap-northeast-3": Object {
        "states": "states.ap-northeast-3.amazonaws.com",
      },
      "ap-south-1": Object {
        "states": "states.ap-south-1.amazonaws.com",
      },
      "ap-southeast-1": Object {
        "states": "states.ap-southeast-1.amazonaws.com",
      },
      "ap-southeast-2": Object {
        "states": "states.ap-southeast-2.amazonaws.com",
      },
      "ap-southeast-3": Object {
        "states": "states.ap-southeast-3.amazonaws.com",
      },
      "ca-central-1": Object {
        "states": "states.ca-central-1.amazonaws.com",
      },
      "cn-north-1": Object {
        "states": "states.cn-north-1.amazonaws.com",
      },
      "cn-northwest-1": Object {
        "states": "states.cn-northwest-1.amazonaws.com",
      },
      "eu-central-1": Object {
        "states": "states.eu-central-1.amazonaws.com",
      },
      "eu-north-1": Object {
        "states": "states.eu-north-1.amazonaws.com",
      },
      "eu-south-1": Object {
        "states": "states.eu-south-1.amazonaws.com",
      },
      "eu-south-2": Object {
        "states": "states.eu-south-2.amazonaws.com",
      },
      "eu-west-1": Object {
        "states": "states.eu-west-1.amazonaws.com",
      },
      "eu-west-2": Object {
        "states": "states.eu-west-2.amazonaws.com",
      },
      "eu-west-3": Object {
        "states": "states.eu-west-3.amazonaws.com",
      },
      "me-south-1": Object {
        "states": "states.me-south-1.amazonaws.com",
      },
      "sa-east-1": Object {
        "states": "states.sa-east-1.amazonaws.com",
      },
      "us-east-1": Object {
        "states": "states.us-east-1.amazonaws.com",
      },
      "us-east-2": Object {
        "states": "states.us-east-2.amazonaws.com",
      },
      "us-gov-east-1": Object {
        "states": "states.us-gov-east-1.amazonaws.com",
      },
      "us-gov-west-1": Object {
        "states": "states.us-gov-west-1.amazonaws.com",
      },
      "us-iso-east-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-iso-west-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-isob-east-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-west-1": Object {
        "states": "states.us-west-1.amazonaws.com",
      },
      "us-west-2": Object {
        "states": "states.us-west-2.amazonaws.com",
      },
    },
  },
  "Resources": Object {
    "DistributedSemaphoreSemaphoreTableE8DED22E": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "SemaphoreName",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "ContributorInsightsSpecification": Object {
          "Enabled": true,
        },
        "KeySchema": Array [
          Object {
            "AttributeName": "SemaphoreName",
            "KeyType": "HASH",
          },
        ],
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "SemaphoreE4816963": Object {
      "DependsOn": Array [
        "SemaphoreRoleDefaultPolicy3FABCD2F",
        "SemaphoreRole7E0FA103",
      ],
      "Properties": Object {
        "DefinitionString": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"StartAt\\":\\"AcquireSemaphore0\\",\\"States\\":{\\"AcquireSemaphore0\\":{\\"Type\\":\\"Parallel\\",\\"Next\\":\\"DoSomething\\",\\"Branches\\":[{\\"StartAt\\":\\"AcquireSemaphore0: TryToAcquireSemaphore\\",\\"States\\":{\\"AcquireSemaphore0: TryToAcquireSemaphore\\":{\\"Next\\":\\"AcquireSemaphore0: SemaphoreAcquired\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"DynamoDB.AmazonDynamoDBException\\"],\\"MaxAttempts\\":0},{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"DynamoDB.AmazonDynamoDBException\\"],\\"ResultPath\\":\\"$.semaphoreInfo.acquisitionError\\",\\"Next\\":\\"AcquireSemaphore0: InitializeSemaphore\\"},{\\"ErrorEquals\\":[\\"DynamoDB.ConditionalCheckFailedException\\"],\\"ResultPath\\":\\"$.semaphoreInfo.acquisitionError\\",\\"Next\\":\\"AcquireSemaphore0: GetSemaphoreUse\\"}],\\"Type\\":\\"Task\\",\\"Comment\\":\\"Try to acquire a semaphore using a conditional update to DynamoDB. This update will do two things: 1) increment a counter for the number of held semaphores and 2) add an attribute to the DynamoDB Item with a unique key for this execution and with a value of the time when the semaphore was Acquired. The Update includes a conditional expression that will fail under two circumstances: 1) if the maximum number of semaphores have already been distributed or 2) if the current execution already owns a semaphore. The latter check is important to ensure the same execution doesn't increase the counter more than once. If either of these conditions are not met, then the task will fail with a DynamoDB.ConditionalCheckFailedException error, retry a few times, then if it is still not successful, it will move off to another branch of the workflow. If this is the first time that a given semaphoreName has been used, there will not be a row in DynamoDB, so the update will fail with DynamoDB.AmazonDynamoDBException. In that case, this state sends the workflow to state that will create that row to initialize.\\",\\"ResultPath\\":null,\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:updateItem\\",\\"Parameters\\":{\\"Key\\":{\\"SemaphoreName\\":{\\"S\\":\\"DefaultSemaphore\\"}},\\"TableName\\":\\"",
              Object {
                "Ref": "DistributedSemaphoreSemaphoreTableE8DED22E",
              },
              "\\",\\"ConditionExpression\\":\\"#currentInUseCount <> :limit and attribute_not_exists(#semaphoreUserId)\\",\\"ExpressionAttributeNames\\":{\\"#currentInUseCount\\":\\"CurrentInUseCount\\",\\"#semaphoreUserId.$\\":\\"$$.Execution.Id\\"},\\"ExpressionAttributeValues\\":{\\":increase\\":{\\"N\\":\\"1\\"},\\":limit\\":{\\"N\\":\\"5\\"},\\":semaphoreUseAcquiredTime\\":{\\"S.$\\":\\"$$.State.EnteredTime\\"}},\\"ReturnValues\\":\\"UPDATED_NEW\\",\\"UpdateExpression\\":\\"SET #currentInUseCount = #currentInUseCount + :increase, #semaphoreUserId = :semaphoreUseAcquiredTime\\"}},\\"AcquireSemaphore0: InitializeSemaphore\\":{\\"Next\\":\\"AcquireSemaphore0: TryToAcquireSemaphore\\",\\"Catch\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"ResultPath\\":null,\\"Next\\":\\"AcquireSemaphore0: TryToAcquireSemaphore\\"}],\\"Type\\":\\"Task\\",\\"Comment\\":\\"This state handles the case where an item hasn't been created for this semaphore yet. In that case, it will insert an initial item that includes the semaphore name as the key and CurrentInUseCount of 0. The Put to DynamoDB includes a conditional expression to fail if the an item with that key already exists, which avoids a race condition if multiple executions start at the same time. There are other reasons that the previous state could fail and end up here, so this is safe in those cases too.\\",\\"ResultPath\\":null,\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:putItem\\",\\"Parameters\\":{\\"Item\\":{\\"SemaphoreName\\":{\\"S\\":\\"DefaultSemaphore\\"},\\"CurrentInUseCount\\":{\\"N\\":\\"0\\"}},\\"TableName\\":\\"",
              Object {
                "Ref": "DistributedSemaphoreSemaphoreTableE8DED22E",
              },
              "\\",\\"ConditionExpression\\":\\"SemaphoreName <> :semaphoreName\\",\\"ExpressionAttributeValues\\":{\\":semaphoreName\\":{\\"S\\":\\"DefaultSemaphore\\"}}}},\\"AcquireSemaphore0: WaitToAcquireSemaphore\\":{\\"Type\\":\\"Wait\\",\\"Comment\\":\\"If the semaphore indeed not been successfully Acquired, then wait for a bit before trying again.\\",\\"Seconds\\":3,\\"Next\\":\\"AcquireSemaphore0: TryToAcquireSemaphore\\"},\\"AcquireSemaphore0: SemaphoreAcquired\\":{\\"Type\\":\\"Pass\\",\\"ResultPath\\":null,\\"End\\":true},\\"AcquireSemaphore0: SemaphoreAcquisitionConfirmedContinue\\":{\\"Type\\":\\"Pass\\",\\"Comment\\":\\"In this state, we have confirmed that semaphore is already held, so we pass the original execution input into the the function that does the work.\\",\\"ResultPath\\":null,\\"Next\\":\\"AcquireSemaphore0: SemaphoreAcquired\\"},\\"AcquireSemaphore0: CheckIfFoundSemaphoreUse\\":{\\"Type\\":\\"Choice\\",\\"Comment\\":\\"This state checks to see if the semaphore user already holds a semaphore. It can tell that by looking for Z, which will be indicative of the timestamp value. That will only be there in the stringified version of the data returned from DDB if this execution holds a semaphore.\\",\\"Choices\\":[{\\"And\\":[{\\"Variable\\":\\"$.semaphoreInfo.currentSemaphoreUse.ItemString\\",\\"IsPresent\\":true},{\\"Variable\\":\\"$.semaphoreInfo.currentSemaphoreUse.ItemString\\",\\"StringMatches\\":\\"*Z*\\"}],\\"Next\\":\\"AcquireSemaphore0: SemaphoreAcquisitionConfirmedContinue\\"}],\\"Default\\":\\"AcquireSemaphore0: WaitToAcquireSemaphore\\"},\\"AcquireSemaphore0: PrepareInput\\":{\\"Type\\":\\"Pass\\",\\"ResultPath\\":\\"$.semaphoreInfo.currentSemaphoreUse\\",\\"Parameters\\":{\\"Item.$\\":\\"$.semaphoreInfo.currentSemaphoreUse.Item\\",\\"ItemString.$\\":\\"States.JsonToString($.semaphoreInfo.currentSemaphoreUse.Item)\\"},\\"Next\\":\\"AcquireSemaphore0: CheckIfFoundSemaphoreUse\\"},\\"AcquireSemaphore0: CheckIfFoundSemaphore\\":{\\"Type\\":\\"Choice\\",\\"Choices\\":[{\\"Variable\\":\\"$.semaphoreInfo.currentSemaphoreUse.Item\\",\\"IsPresent\\":true,\\"Next\\":\\"AcquireSemaphore0: PrepareInput\\"}],\\"Default\\":\\"AcquireSemaphore0: WaitToAcquireSemaphore\\"},\\"AcquireSemaphore0: GetSemaphoreUse\\":{\\"Next\\":\\"AcquireSemaphore0: CheckIfFoundSemaphore\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"IntervalSeconds\\":1,\\"MaxAttempts\\":3,\\"BackoffRate\\":2}],\\"Type\\":\\"Task\\",\\"Comment\\":\\"Get info from DDB for the semaphore item.\\",\\"ResultPath\\":\\"$.semaphoreInfo.currentSemaphoreUse\\",\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:getItem\\",\\"Parameters\\":{\\"Key\\":{\\"SemaphoreName\\":{\\"S\\":\\"DefaultSemaphore\\"}},\\"TableName\\":\\"",
              Object {
                "Ref": "DistributedSemaphoreSemaphoreTableE8DED22E",
              },
              "\\",\\"ConsistentRead\\":true,\\"ExpressionAttributeNames\\":{\\"#semaphoreUserId.$\\":\\"$$.Execution.Id\\"},\\"ProjectionExpression\\":\\"#semaphoreUserId\\"}}}}]},\\"DoSomething\\":{\\"Type\\":\\"Pass\\",\\"Next\\":\\"ReleaseSemaphore1\\"},\\"ReleaseSemaphore1\\":{\\"Type\\":\\"Parallel\\",\\"Next\\":\\"AcquireSemaphore2\\",\\"Branches\\":[{\\"StartAt\\":\\"ReleaseSemaphore1: TryToReleaseSemaphore\\",\\"States\\":{\\"ReleaseSemaphore1: TryToReleaseSemaphore\\":{\\"Next\\":\\"ReleaseSemaphore1: SemaphoreReleased\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"DynamoDB.ConditionalCheckFailedException\\"],\\"MaxAttempts\\":0},{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"IntervalSeconds\\":1,\\"MaxAttempts\\":5,\\"BackoffRate\\":1.5}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"DynamoDB.ConditionalCheckFailedException\\"],\\"ResultPath\\":null,\\"Next\\":\\"ReleaseSemaphore1: SemaphoreUseNotFoundContinue\\"}],\\"Type\\":\\"Task\\",\\"Comment\\":\\"If this semaphoreUserId is still there, then clean it up and release the semaphore\\",\\"ResultPath\\":null,\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:updateItem\\",\\"Parameters\\":{\\"Key\\":{\\"SemaphoreName\\":{\\"S\\":\\"DefaultSemaphore\\"}},\\"TableName\\":\\"",
              Object {
                "Ref": "DistributedSemaphoreSemaphoreTableE8DED22E",
              },
              "\\",\\"ConditionExpression\\":\\"attribute_exists(#semaphoreUserId)\\",\\"ExpressionAttributeNames\\":{\\"#currentInUseCount\\":\\"CurrentInUseCount\\",\\"#semaphoreUserId.$\\":\\"$$.Execution.Id\\"},\\"ExpressionAttributeValues\\":{\\":decrease\\":{\\"N\\":\\"1\\"}},\\"ReturnValues\\":\\"UPDATED_NEW\\",\\"UpdateExpression\\":\\"SET #currentInUseCount = #currentInUseCount - :decrease REMOVE #semaphoreUserId\\"}},\\"ReleaseSemaphore1: SemaphoreReleased\\":{\\"Type\\":\\"Pass\\",\\"ResultPath\\":null,\\"End\\":true},\\"ReleaseSemaphore1: SemaphoreUseNotFoundContinue\\":{\\"Type\\":\\"Pass\\",\\"ResultPath\\":null,\\"Next\\":\\"ReleaseSemaphore1: SemaphoreReleased\\"}}}]},\\"AcquireSemaphore2\\":{\\"Type\\":\\"Parallel\\",\\"Next\\":\\"DoNothing\\",\\"Branches\\":[{\\"StartAt\\":\\"AcquireSemaphore2: TryToAcquireSemaphore\\",\\"States\\":{\\"AcquireSemaphore2: TryToAcquireSemaphore\\":{\\"Next\\":\\"AcquireSemaphore2: SemaphoreAcquired\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"DynamoDB.AmazonDynamoDBException\\"],\\"MaxAttempts\\":0},{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"DynamoDB.AmazonDynamoDBException\\"],\\"ResultPath\\":\\"$.semaphoreInfo.acquisitionError\\",\\"Next\\":\\"AcquireSemaphore2: InitializeSemaphore\\"},{\\"ErrorEquals\\":[\\"DynamoDB.ConditionalCheckFailedException\\"],\\"ResultPath\\":\\"$.semaphoreInfo.acquisitionError\\",\\"Next\\":\\"AcquireSemaphore2: GetSemaphoreUse\\"}],\\"Type\\":\\"Task\\",\\"Comment\\":\\"Try to acquire a semaphore using a conditional update to DynamoDB. This update will do two things: 1) increment a counter for the number of held semaphores and 2) add an attribute to the DynamoDB Item with a unique key for this execution and with a value of the time when the semaphore was Acquired. The Update includes a conditional expression that will fail under two circumstances: 1) if the maximum number of semaphores have already been distributed or 2) if the current execution already owns a semaphore. The latter check is important to ensure the same execution doesn't increase the counter more than once. If either of these conditions are not met, then the task will fail with a DynamoDB.ConditionalCheckFailedException error, retry a few times, then if it is still not successful, it will move off to another branch of the workflow. If this is the first time that a given semaphoreName has been used, there will not be a row in DynamoDB, so the update will fail with DynamoDB.AmazonDynamoDBException. In that case, this state sends the workflow to state that will create that row to initialize.\\",\\"ResultPath\\":null,\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:updateItem\\",\\"Parameters\\":{\\"Key\\":{\\"SemaphoreName\\":{\\"S.$\\":\\"States.Format('{}-{}-getCall', $.accountId, $.region)\\"}},\\"TableName\\":\\"",
              Object {
                "Ref": "DistributedSemaphoreSemaphoreTableE8DED22E",
              },
              "\\",\\"ConditionExpression\\":\\"#currentInUseCount <> :limit and attribute_not_exists(#semaphoreUserId)\\",\\"ExpressionAttributeNames\\":{\\"#currentInUseCount\\":\\"CurrentInUseCount\\",\\"#semaphoreUserId.$\\":\\"$$.Execution.Id\\"},\\"ExpressionAttributeValues\\":{\\":increase\\":{\\"N\\":\\"1\\"},\\":limit\\":{\\"N\\":\\"6\\"},\\":semaphoreUseAcquiredTime\\":{\\"S.$\\":\\"$$.State.EnteredTime\\"}},\\"ReturnValues\\":\\"UPDATED_NEW\\",\\"UpdateExpression\\":\\"SET #currentInUseCount = #currentInUseCount + :increase, #semaphoreUserId = :semaphoreUseAcquiredTime\\"}},\\"AcquireSemaphore2: InitializeSemaphore\\":{\\"Next\\":\\"AcquireSemaphore2: TryToAcquireSemaphore\\",\\"Catch\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"ResultPath\\":null,\\"Next\\":\\"AcquireSemaphore2: TryToAcquireSemaphore\\"}],\\"Type\\":\\"Task\\",\\"Comment\\":\\"This state handles the case where an item hasn't been created for this semaphore yet. In that case, it will insert an initial item that includes the semaphore name as the key and CurrentInUseCount of 0. The Put to DynamoDB includes a conditional expression to fail if the an item with that key already exists, which avoids a race condition if multiple executions start at the same time. There are other reasons that the previous state could fail and end up here, so this is safe in those cases too.\\",\\"ResultPath\\":null,\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:putItem\\",\\"Parameters\\":{\\"Item\\":{\\"SemaphoreName\\":{\\"S.$\\":\\"States.Format('{}-{}-getCall', $.accountId, $.region)\\"},\\"CurrentInUseCount\\":{\\"N\\":\\"0\\"}},\\"TableName\\":\\"",
              Object {
                "Ref": "DistributedSemaphoreSemaphoreTableE8DED22E",
              },
              "\\",\\"ConditionExpression\\":\\"SemaphoreName <> :semaphoreName\\",\\"ExpressionAttributeValues\\":{\\":semaphoreName\\":{\\"S.$\\":\\"States.Format('{}-{}-getCall', $.accountId, $.region)\\"}}}},\\"AcquireSemaphore2: WaitToAcquireSemaphore\\":{\\"Type\\":\\"Wait\\",\\"Comment\\":\\"If the semaphore indeed not been successfully Acquired, then wait for a bit before trying again.\\",\\"Seconds\\":3,\\"Next\\":\\"AcquireSemaphore2: TryToAcquireSemaphore\\"},\\"AcquireSemaphore2: SemaphoreAcquired\\":{\\"Type\\":\\"Pass\\",\\"ResultPath\\":null,\\"End\\":true},\\"AcquireSemaphore2: SemaphoreAcquisitionConfirmedContinue\\":{\\"Type\\":\\"Pass\\",\\"Comment\\":\\"In this state, we have confirmed that semaphore is already held, so we pass the original execution input into the the function that does the work.\\",\\"ResultPath\\":null,\\"Next\\":\\"AcquireSemaphore2: SemaphoreAcquired\\"},\\"AcquireSemaphore2: CheckIfFoundSemaphoreUse\\":{\\"Type\\":\\"Choice\\",\\"Comment\\":\\"This state checks to see if the semaphore user already holds a semaphore. It can tell that by looking for Z, which will be indicative of the timestamp value. That will only be there in the stringified version of the data returned from DDB if this execution holds a semaphore.\\",\\"Choices\\":[{\\"And\\":[{\\"Variable\\":\\"$.semaphoreInfo.currentSemaphoreUse.ItemString\\",\\"IsPresent\\":true},{\\"Variable\\":\\"$.semaphoreInfo.currentSemaphoreUse.ItemString\\",\\"StringMatches\\":\\"*Z*\\"}],\\"Next\\":\\"AcquireSemaphore2: SemaphoreAcquisitionConfirmedContinue\\"}],\\"Default\\":\\"AcquireSemaphore2: WaitToAcquireSemaphore\\"},\\"AcquireSemaphore2: PrepareInput\\":{\\"Type\\":\\"Pass\\",\\"ResultPath\\":\\"$.semaphoreInfo.currentSemaphoreUse\\",\\"Parameters\\":{\\"Item.$\\":\\"$.semaphoreInfo.currentSemaphoreUse.Item\\",\\"ItemString.$\\":\\"States.JsonToString($.semaphoreInfo.currentSemaphoreUse.Item)\\"},\\"Next\\":\\"AcquireSemaphore2: CheckIfFoundSemaphoreUse\\"},\\"AcquireSemaphore2: CheckIfFoundSemaphore\\":{\\"Type\\":\\"Choice\\",\\"Choices\\":[{\\"Variable\\":\\"$.semaphoreInfo.currentSemaphoreUse.Item\\",\\"IsPresent\\":true,\\"Next\\":\\"AcquireSemaphore2: PrepareInput\\"}],\\"Default\\":\\"AcquireSemaphore2: WaitToAcquireSemaphore\\"},\\"AcquireSemaphore2: GetSemaphoreUse\\":{\\"Next\\":\\"AcquireSemaphore2: CheckIfFoundSemaphore\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"IntervalSeconds\\":1,\\"MaxAttempts\\":3,\\"BackoffRate\\":2}],\\"Type\\":\\"Task\\",\\"Comment\\":\\"Get info from DDB for the semaphore item.\\",\\"ResultPath\\":\\"$.semaphoreInfo.currentSemaphoreUse\\",\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:getItem\\",\\"Parameters\\":{\\"Key\\":{\\"SemaphoreName\\":{\\"S.$\\":\\"States.Format('{}-{}-getCall', $.accountId, $.region)\\"}},\\"TableName\\":\\"",
              Object {
                "Ref": "DistributedSemaphoreSemaphoreTableE8DED22E",
              },
              "\\",\\"ConsistentRead\\":true,\\"ExpressionAttributeNames\\":{\\"#semaphoreUserId.$\\":\\"$$.Execution.Id\\"},\\"ProjectionExpression\\":\\"#semaphoreUserId\\"}}}}]},\\"DoNothing\\":{\\"Type\\":\\"Pass\\",\\"Next\\":\\"ReleaseSemaphore3\\"},\\"ReleaseSemaphore3\\":{\\"Type\\":\\"Parallel\\",\\"Next\\":\\"AcquireSemaphore4\\",\\"Branches\\":[{\\"StartAt\\":\\"ReleaseSemaphore3: TryToReleaseSemaphore\\",\\"States\\":{\\"ReleaseSemaphore3: TryToReleaseSemaphore\\":{\\"Next\\":\\"ReleaseSemaphore3: SemaphoreReleased\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"DynamoDB.ConditionalCheckFailedException\\"],\\"MaxAttempts\\":0},{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"IntervalSeconds\\":1,\\"MaxAttempts\\":5,\\"BackoffRate\\":1.5}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"DynamoDB.ConditionalCheckFailedException\\"],\\"ResultPath\\":null,\\"Next\\":\\"ReleaseSemaphore3: SemaphoreUseNotFoundContinue\\"}],\\"Type\\":\\"Task\\",\\"Comment\\":\\"If this semaphoreUserId is still there, then clean it up and release the semaphore\\",\\"ResultPath\\":null,\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:updateItem\\",\\"Parameters\\":{\\"Key\\":{\\"SemaphoreName\\":{\\"S.$\\":\\"States.Format('{}-{}-getCall', $.accountId, $.region)\\"}},\\"TableName\\":\\"",
              Object {
                "Ref": "DistributedSemaphoreSemaphoreTableE8DED22E",
              },
              "\\",\\"ConditionExpression\\":\\"attribute_exists(#semaphoreUserId)\\",\\"ExpressionAttributeNames\\":{\\"#currentInUseCount\\":\\"CurrentInUseCount\\",\\"#semaphoreUserId.$\\":\\"$$.Execution.Id\\"},\\"ExpressionAttributeValues\\":{\\":decrease\\":{\\"N\\":\\"1\\"}},\\"ReturnValues\\":\\"UPDATED_NEW\\",\\"UpdateExpression\\":\\"SET #currentInUseCount = #currentInUseCount - :decrease REMOVE #semaphoreUserId\\"}},\\"ReleaseSemaphore3: SemaphoreReleased\\":{\\"Type\\":\\"Pass\\",\\"ResultPath\\":null,\\"End\\":true},\\"ReleaseSemaphore3: SemaphoreUseNotFoundContinue\\":{\\"Type\\":\\"Pass\\",\\"ResultPath\\":null,\\"Next\\":\\"ReleaseSemaphore3: SemaphoreReleased\\"}}}]},\\"AcquireSemaphore4\\":{\\"Type\\":\\"Parallel\\",\\"Next\\":\\"AllGood\\",\\"Branches\\":[{\\"StartAt\\":\\"AcquireSemaphore4: TryToAcquireSemaphore\\",\\"States\\":{\\"AcquireSemaphore4: TryToAcquireSemaphore\\":{\\"Next\\":\\"AcquireSemaphore4: SemaphoreAcquired\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"DynamoDB.AmazonDynamoDBException\\"],\\"MaxAttempts\\":0},{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"DynamoDB.AmazonDynamoDBException\\"],\\"ResultPath\\":\\"$.semaphoreInfo.acquisitionError\\",\\"Next\\":\\"AcquireSemaphore4: InitializeSemaphore\\"},{\\"ErrorEquals\\":[\\"DynamoDB.ConditionalCheckFailedException\\"],\\"ResultPath\\":\\"$.semaphoreInfo.acquisitionError\\",\\"Next\\":\\"AcquireSemaphore4: GetSemaphoreUse\\"}],\\"Type\\":\\"Task\\",\\"Comment\\":\\"Try to acquire a semaphore using a conditional update to DynamoDB. This update will do two things: 1) increment a counter for the number of held semaphores and 2) add an attribute to the DynamoDB Item with a unique key for this execution and with a value of the time when the semaphore was Acquired. The Update includes a conditional expression that will fail under two circumstances: 1) if the maximum number of semaphores have already been distributed or 2) if the current execution already owns a semaphore. The latter check is important to ensure the same execution doesn't increase the counter more than once. If either of these conditions are not met, then the task will fail with a DynamoDB.ConditionalCheckFailedException error, retry a few times, then if it is still not successful, it will move off to another branch of the workflow. If this is the first time that a given semaphoreName has been used, there will not be a row in DynamoDB, so the update will fail with DynamoDB.AmazonDynamoDBException. In that case, this state sends the workflow to state that will create that row to initialize.\\",\\"ResultPath\\":null,\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:updateItem\\",\\"Parameters\\":{\\"Key\\":{\\"SemaphoreName\\":{\\"S\\":\\"NotDefaultName\\"}},\\"TableName\\":\\"",
              Object {
                "Ref": "DistributedSemaphoreSemaphoreTableE8DED22E",
              },
              "\\",\\"ConditionExpression\\":\\"#currentInUseCount <> :limit and attribute_not_exists(#semaphoreUserId)\\",\\"ExpressionAttributeNames\\":{\\"#currentInUseCount\\":\\"CurrentInUseCount\\",\\"#semaphoreUserId.$\\":\\"$$.Execution.Id\\"},\\"ExpressionAttributeValues\\":{\\":increase\\":{\\"N\\":\\"1\\"},\\":limit\\":{\\"N\\":\\"7\\"},\\":semaphoreUseAcquiredTime\\":{\\"S.$\\":\\"$$.State.EnteredTime\\"}},\\"ReturnValues\\":\\"UPDATED_NEW\\",\\"UpdateExpression\\":\\"SET #currentInUseCount = #currentInUseCount + :increase, #semaphoreUserId = :semaphoreUseAcquiredTime\\"}},\\"AcquireSemaphore4: InitializeSemaphore\\":{\\"Next\\":\\"AcquireSemaphore4: TryToAcquireSemaphore\\",\\"Catch\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"ResultPath\\":null,\\"Next\\":\\"AcquireSemaphore4: TryToAcquireSemaphore\\"}],\\"Type\\":\\"Task\\",\\"Comment\\":\\"This state handles the case where an item hasn't been created for this semaphore yet. In that case, it will insert an initial item that includes the semaphore name as the key and CurrentInUseCount of 0. The Put to DynamoDB includes a conditional expression to fail if the an item with that key already exists, which avoids a race condition if multiple executions start at the same time. There are other reasons that the previous state could fail and end up here, so this is safe in those cases too.\\",\\"ResultPath\\":null,\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:putItem\\",\\"Parameters\\":{\\"Item\\":{\\"SemaphoreName\\":{\\"S\\":\\"NotDefaultName\\"},\\"CurrentInUseCount\\":{\\"N\\":\\"0\\"}},\\"TableName\\":\\"",
              Object {
                "Ref": "DistributedSemaphoreSemaphoreTableE8DED22E",
              },
              "\\",\\"ConditionExpression\\":\\"SemaphoreName <> :semaphoreName\\",\\"ExpressionAttributeValues\\":{\\":semaphoreName\\":{\\"S\\":\\"NotDefaultName\\"}}}},\\"AcquireSemaphore4: WaitToAcquireSemaphore\\":{\\"Type\\":\\"Wait\\",\\"Comment\\":\\"If the semaphore indeed not been successfully Acquired, then wait for a bit before trying again.\\",\\"Seconds\\":3,\\"Next\\":\\"AcquireSemaphore4: TryToAcquireSemaphore\\"},\\"AcquireSemaphore4: SemaphoreAcquired\\":{\\"Type\\":\\"Pass\\",\\"ResultPath\\":null,\\"End\\":true},\\"AcquireSemaphore4: SemaphoreAcquisitionConfirmedContinue\\":{\\"Type\\":\\"Pass\\",\\"Comment\\":\\"In this state, we have confirmed that semaphore is already held, so we pass the original execution input into the the function that does the work.\\",\\"ResultPath\\":null,\\"Next\\":\\"AcquireSemaphore4: SemaphoreAcquired\\"},\\"AcquireSemaphore4: CheckIfFoundSemaphoreUse\\":{\\"Type\\":\\"Choice\\",\\"Comment\\":\\"This state checks to see if the semaphore user already holds a semaphore. It can tell that by looking for Z, which will be indicative of the timestamp value. That will only be there in the stringified version of the data returned from DDB if this execution holds a semaphore.\\",\\"Choices\\":[{\\"And\\":[{\\"Variable\\":\\"$.semaphoreInfo.currentSemaphoreUse.ItemString\\",\\"IsPresent\\":true},{\\"Variable\\":\\"$.semaphoreInfo.currentSemaphoreUse.ItemString\\",\\"StringMatches\\":\\"*Z*\\"}],\\"Next\\":\\"AcquireSemaphore4: SemaphoreAcquisitionConfirmedContinue\\"}],\\"Default\\":\\"AcquireSemaphore4: WaitToAcquireSemaphore\\"},\\"AcquireSemaphore4: PrepareInput\\":{\\"Type\\":\\"Pass\\",\\"ResultPath\\":\\"$.semaphoreInfo.currentSemaphoreUse\\",\\"Parameters\\":{\\"Item.$\\":\\"$.semaphoreInfo.currentSemaphoreUse.Item\\",\\"ItemString.$\\":\\"States.JsonToString($.semaphoreInfo.currentSemaphoreUse.Item)\\"},\\"Next\\":\\"AcquireSemaphore4: CheckIfFoundSemaphoreUse\\"},\\"AcquireSemaphore4: CheckIfFoundSemaphore\\":{\\"Type\\":\\"Choice\\",\\"Choices\\":[{\\"Variable\\":\\"$.semaphoreInfo.currentSemaphoreUse.Item\\",\\"IsPresent\\":true,\\"Next\\":\\"AcquireSemaphore4: PrepareInput\\"}],\\"Default\\":\\"AcquireSemaphore4: WaitToAcquireSemaphore\\"},\\"AcquireSemaphore4: GetSemaphoreUse\\":{\\"Next\\":\\"AcquireSemaphore4: CheckIfFoundSemaphore\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"IntervalSeconds\\":1,\\"MaxAttempts\\":3,\\"BackoffRate\\":2}],\\"Type\\":\\"Task\\",\\"Comment\\":\\"Get info from DDB for the semaphore item.\\",\\"ResultPath\\":\\"$.semaphoreInfo.currentSemaphoreUse\\",\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:getItem\\",\\"Parameters\\":{\\"Key\\":{\\"SemaphoreName\\":{\\"S\\":\\"NotDefaultName\\"}},\\"TableName\\":\\"",
              Object {
                "Ref": "DistributedSemaphoreSemaphoreTableE8DED22E",
              },
              "\\",\\"ConsistentRead\\":true,\\"ExpressionAttributeNames\\":{\\"#semaphoreUserId.$\\":\\"$$.Execution.Id\\"},\\"ProjectionExpression\\":\\"#semaphoreUserId\\"}}}}]},\\"AllGood\\":{\\"Type\\":\\"Pass\\",\\"Next\\":\\"ReleaseSemaphore5\\"},\\"ReleaseSemaphore5\\":{\\"Type\\":\\"Parallel\\",\\"Next\\":\\"AcquireSemaphore6\\",\\"Branches\\":[{\\"StartAt\\":\\"ReleaseSemaphore5: TryToReleaseSemaphore\\",\\"States\\":{\\"ReleaseSemaphore5: TryToReleaseSemaphore\\":{\\"Next\\":\\"ReleaseSemaphore5: SemaphoreReleased\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"DynamoDB.ConditionalCheckFailedException\\"],\\"MaxAttempts\\":0},{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"IntervalSeconds\\":1,\\"MaxAttempts\\":5,\\"BackoffRate\\":1.5}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"DynamoDB.ConditionalCheckFailedException\\"],\\"ResultPath\\":null,\\"Next\\":\\"ReleaseSemaphore5: SemaphoreUseNotFoundContinue\\"}],\\"Type\\":\\"Task\\",\\"Comment\\":\\"If this semaphoreUserId is still there, then clean it up and release the semaphore\\",\\"ResultPath\\":null,\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:updateItem\\",\\"Parameters\\":{\\"Key\\":{\\"SemaphoreName\\":{\\"S\\":\\"NotDefaultName\\"}},\\"TableName\\":\\"",
              Object {
                "Ref": "DistributedSemaphoreSemaphoreTableE8DED22E",
              },
              "\\",\\"ConditionExpression\\":\\"attribute_exists(#semaphoreUserId)\\",\\"ExpressionAttributeNames\\":{\\"#currentInUseCount\\":\\"CurrentInUseCount\\",\\"#semaphoreUserId.$\\":\\"$$.Execution.Id\\"},\\"ExpressionAttributeValues\\":{\\":decrease\\":{\\"N\\":\\"1\\"}},\\"ReturnValues\\":\\"UPDATED_NEW\\",\\"UpdateExpression\\":\\"SET #currentInUseCount = #currentInUseCount - :decrease REMOVE #semaphoreUserId\\"}},\\"ReleaseSemaphore5: SemaphoreReleased\\":{\\"Type\\":\\"Pass\\",\\"ResultPath\\":null,\\"End\\":true},\\"ReleaseSemaphore5: SemaphoreUseNotFoundContinue\\":{\\"Type\\":\\"Pass\\",\\"ResultPath\\":null,\\"Next\\":\\"ReleaseSemaphore5: SemaphoreReleased\\"}}}]},\\"AcquireSemaphore6\\":{\\"Type\\":\\"Parallel\\",\\"Next\\":\\"ItWorks\\",\\"Branches\\":[{\\"StartAt\\":\\"AcquireSemaphore6: TryToAcquireSemaphore\\",\\"States\\":{\\"AcquireSemaphore6: TryToAcquireSemaphore\\":{\\"Next\\":\\"AcquireSemaphore6: SemaphoreAcquired\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"DynamoDB.AmazonDynamoDBException\\"],\\"MaxAttempts\\":0},{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"DynamoDB.AmazonDynamoDBException\\"],\\"ResultPath\\":\\"$.semaphoreInfo.acquisitionError\\",\\"Next\\":\\"AcquireSemaphore6: InitializeSemaphore\\"},{\\"ErrorEquals\\":[\\"DynamoDB.ConditionalCheckFailedException\\"],\\"ResultPath\\":\\"$.semaphoreInfo.acquisitionError\\",\\"Next\\":\\"AcquireSemaphore6: GetSemaphoreUse\\"}],\\"Type\\":\\"Task\\",\\"Comment\\":\\"Try to acquire a semaphore using a conditional update to DynamoDB. This update will do two things: 1) increment a counter for the number of held semaphores and 2) add an attribute to the DynamoDB Item with a unique key for this execution and with a value of the time when the semaphore was Acquired. The Update includes a conditional expression that will fail under two circumstances: 1) if the maximum number of semaphores have already been distributed or 2) if the current execution already owns a semaphore. The latter check is important to ensure the same execution doesn't increase the counter more than once. If either of these conditions are not met, then the task will fail with a DynamoDB.ConditionalCheckFailedException error, retry a few times, then if it is still not successful, it will move off to another branch of the workflow. If this is the first time that a given semaphoreName has been used, there will not be a row in DynamoDB, so the update will fail with DynamoDB.AmazonDynamoDBException. In that case, this state sends the workflow to state that will create that row to initialize.\\",\\"ResultPath\\":null,\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:updateItem\\",\\"Parameters\\":{\\"Key\\":{\\"SemaphoreName\\":{\\"S.$\\":\\"States.Format('{}-{}-getCall', $.accountId, $.region)\\"}},\\"TableName\\":\\"",
              Object {
                "Ref": "DistributedSemaphoreSemaphoreTableE8DED22E",
              },
              "\\",\\"ConditionExpression\\":\\"#currentInUseCount <> :limit and attribute_not_exists(#semaphoreUserId)\\",\\"ExpressionAttributeNames\\":{\\"#currentInUseCount\\":\\"CurrentInUseCount\\",\\"#semaphoreUserId.$\\":\\"$$.Execution.Id\\"},\\"ExpressionAttributeValues\\":{\\":increase\\":{\\"N\\":\\"1\\"},\\":limit\\":{\\"N\\":\\"6\\"},\\":semaphoreUseAcquiredTime\\":{\\"S.$\\":\\"$$.State.EnteredTime\\"}},\\"ReturnValues\\":\\"UPDATED_NEW\\",\\"UpdateExpression\\":\\"SET #currentInUseCount = #currentInUseCount + :increase, #semaphoreUserId = :semaphoreUseAcquiredTime\\"}},\\"AcquireSemaphore6: InitializeSemaphore\\":{\\"Next\\":\\"AcquireSemaphore6: TryToAcquireSemaphore\\",\\"Catch\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"ResultPath\\":null,\\"Next\\":\\"AcquireSemaphore6: TryToAcquireSemaphore\\"}],\\"Type\\":\\"Task\\",\\"Comment\\":\\"This state handles the case where an item hasn't been created for this semaphore yet. In that case, it will insert an initial item that includes the semaphore name as the key and CurrentInUseCount of 0. The Put to DynamoDB includes a conditional expression to fail if the an item with that key already exists, which avoids a race condition if multiple executions start at the same time. There are other reasons that the previous state could fail and end up here, so this is safe in those cases too.\\",\\"ResultPath\\":null,\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:putItem\\",\\"Parameters\\":{\\"Item\\":{\\"SemaphoreName\\":{\\"S.$\\":\\"States.Format('{}-{}-getCall', $.accountId, $.region)\\"},\\"CurrentInUseCount\\":{\\"N\\":\\"0\\"}},\\"TableName\\":\\"",
              Object {
                "Ref": "DistributedSemaphoreSemaphoreTableE8DED22E",
              },
              "\\",\\"ConditionExpression\\":\\"SemaphoreName <> :semaphoreName\\",\\"ExpressionAttributeValues\\":{\\":semaphoreName\\":{\\"S.$\\":\\"States.Format('{}-{}-getCall', $.accountId, $.region)\\"}}}},\\"AcquireSemaphore6: WaitToAcquireSemaphore\\":{\\"Type\\":\\"Wait\\",\\"Comment\\":\\"If the semaphore indeed not been successfully Acquired, then wait for a bit before trying again.\\",\\"Seconds\\":3,\\"Next\\":\\"AcquireSemaphore6: TryToAcquireSemaphore\\"},\\"AcquireSemaphore6: SemaphoreAcquired\\":{\\"Type\\":\\"Pass\\",\\"ResultPath\\":null,\\"End\\":true},\\"AcquireSemaphore6: SemaphoreAcquisitionConfirmedContinue\\":{\\"Type\\":\\"Pass\\",\\"Comment\\":\\"In this state, we have confirmed that semaphore is already held, so we pass the original execution input into the the function that does the work.\\",\\"ResultPath\\":null,\\"Next\\":\\"AcquireSemaphore6: SemaphoreAcquired\\"},\\"AcquireSemaphore6: CheckIfFoundSemaphoreUse\\":{\\"Type\\":\\"Choice\\",\\"Comment\\":\\"This state checks to see if the semaphore user already holds a semaphore. It can tell that by looking for Z, which will be indicative of the timestamp value. That will only be there in the stringified version of the data returned from DDB if this execution holds a semaphore.\\",\\"Choices\\":[{\\"And\\":[{\\"Variable\\":\\"$.semaphoreInfo.currentSemaphoreUse.ItemString\\",\\"IsPresent\\":true},{\\"Variable\\":\\"$.semaphoreInfo.currentSemaphoreUse.ItemString\\",\\"StringMatches\\":\\"*Z*\\"}],\\"Next\\":\\"AcquireSemaphore6: SemaphoreAcquisitionConfirmedContinue\\"}],\\"Default\\":\\"AcquireSemaphore6: WaitToAcquireSemaphore\\"},\\"AcquireSemaphore6: PrepareInput\\":{\\"Type\\":\\"Pass\\",\\"ResultPath\\":\\"$.semaphoreInfo.currentSemaphoreUse\\",\\"Parameters\\":{\\"Item.$\\":\\"$.semaphoreInfo.currentSemaphoreUse.Item\\",\\"ItemString.$\\":\\"States.JsonToString($.semaphoreInfo.currentSemaphoreUse.Item)\\"},\\"Next\\":\\"AcquireSemaphore6: CheckIfFoundSemaphoreUse\\"},\\"AcquireSemaphore6: CheckIfFoundSemaphore\\":{\\"Type\\":\\"Choice\\",\\"Choices\\":[{\\"Variable\\":\\"$.semaphoreInfo.currentSemaphoreUse.Item\\",\\"IsPresent\\":true,\\"Next\\":\\"AcquireSemaphore6: PrepareInput\\"}],\\"Default\\":\\"AcquireSemaphore6: WaitToAcquireSemaphore\\"},\\"AcquireSemaphore6: GetSemaphoreUse\\":{\\"Next\\":\\"AcquireSemaphore6: CheckIfFoundSemaphore\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"IntervalSeconds\\":1,\\"MaxAttempts\\":3,\\"BackoffRate\\":2}],\\"Type\\":\\"Task\\",\\"Comment\\":\\"Get info from DDB for the semaphore item.\\",\\"ResultPath\\":\\"$.semaphoreInfo.currentSemaphoreUse\\",\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:getItem\\",\\"Parameters\\":{\\"Key\\":{\\"SemaphoreName\\":{\\"S.$\\":\\"States.Format('{}-{}-getCall', $.accountId, $.region)\\"}},\\"TableName\\":\\"",
              Object {
                "Ref": "DistributedSemaphoreSemaphoreTableE8DED22E",
              },
              "\\",\\"ConsistentRead\\":true,\\"ExpressionAttributeNames\\":{\\"#semaphoreUserId.$\\":\\"$$.Execution.Id\\"},\\"ProjectionExpression\\":\\"#semaphoreUserId\\"}}}}]},\\"ItWorks\\":{\\"Type\\":\\"Pass\\",\\"Next\\":\\"ReleaseSemaphore7\\"},\\"ReleaseSemaphore7\\":{\\"Type\\":\\"Parallel\\",\\"End\\":true,\\"Branches\\":[{\\"StartAt\\":\\"ReleaseSemaphore7: TryToReleaseSemaphore\\",\\"States\\":{\\"ReleaseSemaphore7: TryToReleaseSemaphore\\":{\\"Next\\":\\"ReleaseSemaphore7: SemaphoreReleased\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"DynamoDB.ConditionalCheckFailedException\\"],\\"MaxAttempts\\":0},{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"IntervalSeconds\\":1,\\"MaxAttempts\\":5,\\"BackoffRate\\":1.5}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"DynamoDB.ConditionalCheckFailedException\\"],\\"ResultPath\\":null,\\"Next\\":\\"ReleaseSemaphore7: SemaphoreUseNotFoundContinue\\"}],\\"Type\\":\\"Task\\",\\"Comment\\":\\"If this semaphoreUserId is still there, then clean it up and release the semaphore\\",\\"ResultPath\\":null,\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:updateItem\\",\\"Parameters\\":{\\"Key\\":{\\"SemaphoreName\\":{\\"S.$\\":\\"States.Format('{}-{}-getCall', $.accountId, $.region)\\"}},\\"TableName\\":\\"",
              Object {
                "Ref": "DistributedSemaphoreSemaphoreTableE8DED22E",
              },
              "\\",\\"ConditionExpression\\":\\"attribute_exists(#semaphoreUserId)\\",\\"ExpressionAttributeNames\\":{\\"#currentInUseCount\\":\\"CurrentInUseCount\\",\\"#semaphoreUserId.$\\":\\"$$.Execution.Id\\"},\\"ExpressionAttributeValues\\":{\\":decrease\\":{\\"N\\":\\"1\\"}},\\"ReturnValues\\":\\"UPDATED_NEW\\",\\"UpdateExpression\\":\\"SET #currentInUseCount = #currentInUseCount - :decrease REMOVE #semaphoreUserId\\"}},\\"ReleaseSemaphore7: SemaphoreReleased\\":{\\"Type\\":\\"Pass\\",\\"ResultPath\\":null,\\"End\\":true},\\"ReleaseSemaphore7: SemaphoreUseNotFoundContinue\\":{\\"Type\\":\\"Pass\\",\\"ResultPath\\":null,\\"Next\\":\\"ReleaseSemaphore7: SemaphoreReleased\\"}}}]}}}",
            ],
          ],
        },
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "SemaphoreRole7E0FA103",
            "Arn",
          ],
        },
      },
      "Type": "AWS::StepFunctions::StateMachine",
    },
    "SemaphoreRole7E0FA103": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::FindInMap": Array [
                    "ServiceprincipalMap",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    "states",
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "SemaphoreRoleDefaultPolicy3FABCD2F": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "dynamodb:UpdateItem",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":dynamodb:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":table/",
                    Object {
                      "Ref": "DistributedSemaphoreSemaphoreTableE8DED22E",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": "dynamodb:PutItem",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":dynamodb:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":table/",
                    Object {
                      "Ref": "DistributedSemaphoreSemaphoreTableE8DED22E",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": "dynamodb:GetItem",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":dynamodb:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":table/",
                    Object {
                      "Ref": "DistributedSemaphoreSemaphoreTableE8DED22E",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SemaphoreRoleDefaultPolicy3FABCD2F",
        "Roles": Array [
          Object {
            "Ref": "SemaphoreRole7E0FA103",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
}
`;
